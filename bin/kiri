#!/bin/bash

# Kicad 5 files will be ploted with plotgitcsch
# FORCE_PLOTTING_GRAPHICALLY env variable forces it to be ploted graphically
# Set it with before runing Kiri with
# export FORCE_PLOTTING_GRAPHICALLY=1

# shellcheck disable=SC2155 # Disable declare and assign separately

if [[ -n "${SUPER_DEBUG}" ]]; then
	set -xe
fi

insert_commits_html()
{
	# GIT COMMITS FORMAT
	# local   | 2021-01-22 17:21:39 | Leandro Heck | Local changes
	# fcd81ef | 2021-01-22 17:21:39 | Leandro Heck | Initial version
	# d20b900 | 2021-01-22 16:59:29 | Leandro Heck | Initial commit

	local html_path="${1}"
	local commit1_i="${2}"
	local commit2_i="${3}"

	local commit_html
	local commits_html

	local empty_img='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #ff0000;" data-inline="false"; data-icon="bx:bx-x"></span>'
	local   sch_img='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #A6E22E;" data-inline="false"; data-icon="carbon:schematics"></span>'
	local   pcb_img='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #F92672;" data-inline="false"; data-icon="codicon:circuit-board"></span>'
	local   txt_img='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #888888;" data-inline="false"; data-icon="bi:file-earmark-text"></span>'

	local i=0
	IFS=$'\n'
	for commit in ${COMMITS}; do

		local hash=$(echo "${commit}" | cut -d'|' -f1 | sed "s/^ //g" | sed "s/[ t]\+//g" )
		local date=$(echo "${commit}" | cut -d'|' -f2 | cut -d' ' -f1-2 | sed "s/^ //g" )
		local user=$(echo "${commit}" | cut -d'|' -f3 | sed "s/^ //g" )
		local text=$(echo "${commit}" | cut -d'|' -f4 | sed "s/^ //g" )

		local kicad_pro=$(get_kicad_pro "${OUTPUT_DIR_PATH}/${hash}")
		local kicad_pro_extension=$(get_file_extension "${kicad_pro}")
		local kicad_proj_name=$(get_file_without_extention "${kicad_pro}")
		local kicad_sch=$(get_kicad_sch "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}" "${kicad_pro_extension}")
		local kicad_pcb=$(get_kicad_pcb "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")
		local kicad_sch_pages=$(get_kicad_sch_pages "${KICAD_PROJ_ABSOLUTE_PATH}/${kicad_sch}")
		local kicad_cache_lib=$(get_kicad_cache_lib "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")
		# show_project_files "${OUTPUT_DIR_PATH}/${hash}" "${kicad_pro}" "${kicad_sch}" "${kicad_pcb}" "${kicad_cache_lib}"

		if [[ "${hash}" != "_local_" ]]; then

			# Check for changes in ".sch|.kicad_sch" files
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${KICAD_PROJ_NESTED_PATH}" | cat | grep -q -s -E "${kicad_sch// /|}${kicad_sch_pages}"; then
				sch_icon="${sch_img}"
			else
				sch_icon="${empty_img}"
			fi

			# Check for changes in .kicad_pcb files
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${KICAD_PROJ_NESTED_PATH}" | cat | grep -q -s "${kicad_pcb}"; then
				pcb_icon="${pcb_img}"
			else
				pcb_icon="${empty_img}"
			fi

			# Check for changes in textual files only
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${KICAD_PROJ_NESTED_PATH}" | cat | grep -q -s -vE "${kicad_sch// /|}${kicad_sch_pages}${kicad_pcb}"; then
				txt_icon="${txt_img}"
			else
				txt_icon="${empty_img}"
			fi

			if [[ "${i}" == "${commit1_i}" ]] || [[ "${i}" == "${commit2_i}" ]]; then
				checked="checked='checked'"
			else
				checked=""
			fi

			hash_label="${hash}"
			class="text-info"

		else

			# Check for changes in ".sch|.kicad_sch" files
			if git status -uno  | grep -q -s -E "${kicad_pro}${kicad_sch// /|}${kicad_pcb}${kicad_sch_pages}"; then
				sch_icon="${sch_img}"
			else
				sch_icon="${empty_img}"
			fi

			# Check for changes in .kicad_pcb files
			if git status -uno  | grep -q -s -E "${kicad_pcb}"; then
				pcb_icon="${pcb_img}"
			else
				pcb_icon="${empty_img}"
			fi

			# Check for changes in textual files only
			if git status -uno  | grep -q -s -vE "${kicad_pro}${kicad_sch// /|}${kicad_pcb}${kicad_sch_pages}"; then
				txt_icon="${txt_img}"
			else
				txt_icon="${empty_img}"
			fi

			if [[ "${i}" == "${commit1_i}" ]] || [[ "${i}" == "${commit2_i}" ]]; then
				checked="checked='checked'"
			else
				checked=""
			fi

			hash_label="${hash}"
			class="text-warning"
		fi

		i=$((i + 1))

		html_new_line="&#013;"
		tooltip="<div>Commit: ${hash}</br>Date: ${date}</br>Author: ${user}</br>Description:</br>${text}</div>"

		read -r -d '' commit_html <<-EOM
		<!-- Commit ${i} -->
		<input class="chkGroup" type="checkbox" id="${hash}" name="commit" value="${hash}" ${checked} onchange="update_commits()"/>
		<label class="text-sm-left list-group-item" style="display: block; width: 445px; margin-left: 0px;" for="${hash}">
		    <table data-toggle="tooltip" title="${tooltip}">
		        <tr>
		            <td rowspan=2 style="vertical-align: top; width: 1.8em;">
		                <svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" width="15" height="15">
		                    <path d="M7.5 10.5a3 3 0 010-6m0 6a3 3 0 000-6m0 6V15m0-10.5V0" stroke="currentColor"></path>
		                </svg>
		            </td>
		            <td style="white-space:nowrap; overflow: hidden; text-overflow: ellipsis;">
		                <span class="text-success font-weight-normal">${hash_label}</span> <span class="text-muted"> | </span> ${sch_icon} ${pcb_icon} ${txt_icon} <span class="text-muted font-weight-normal"> | ${date} | ${user}</span>
		            </td>
		        </tr>
		        <tr>
		            <td>
		                <em class="${class}" style=" line-height: 0.7;">${text}</em>
		            </td>
		        </tr>
		    </table>
		</label>
		EOM

		commits_html="${commits_html}${commit_html}\n"

	done

	indent=$(printf '\t%.0s' {1..8})

	# shellcheck disable=SC2086,SC2001
	commits_html="$(echo -e "${commits_html}" | sed "s|^|${indent}|g" | sed "s|@|-|g" | tee "${OUTPUT_DIR_PATH}/commits.html")"

	line_no=$(($(grep -n "FILL_COMMITS_HERE" "${html_path}" | cut -d":" -f1) + 1))
	sed -i "${line_no} e cat \"${OUTPUT_DIR_PATH}/commits.html\"" "${html_path}"
}

insert_pages_html()
{
	local html_path="${1}"
	local commit_hash_1="${2}"
	local commit_hash_2="${3}"

	local page_html
	local pages_html

	local pages=$(cat "${OUTPUT_DIR_PATH}/sch_sheets")
	local pages_to_skip

	local i=0
	IFS=$'\n'
	for page in ${pages}; do

		local page_name=$(echo "${page}" | cut -d'|' -f1 | sed "s/^[ \t]\+//g" | sed "s/[ \t]\+$//g")
		local page_filename_path=$(echo "${page}" | cut -d'|' -f2 | sed "s/^[ \t]\+//g" | sed "s/[ \t]\+$//g")
		local page_filename=$(echo "${page_filename_path}" | xargs basename)

		if echo -e "${pages_to_skip}" | grep -s "${page_filename_path}" > /dev/null; then
			continue
		else
			pages_to_skip="${pages_to_skip}\n${page_filename_path}"
		fi

		if [[ "${i}" == "0" ]]; then
			checked='checked="checked"'
		else
			checked=""
		fi

		i=$((i + 1))

		# IFS=
		read -r -d '' page_html <<-EOM
		<!-- Page ${i} -->
		<input id="${page_name}" data-toggle="tooltip" title="${page_filename_path}" type="radio" value="${page_filename}" name="pages" ${checked} onchange="change_page()"/>
		<label for="${page_name}" data-toggle="tooltip" title="${page_filename_path}" id="label-${page_name}" class="rounded text-sm-left list-group-item radio-box" onclick="change_page_onclick()" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
		    <span data-toggle="tooltip" title="${page_name}" style="margin-left:0.5em; margin-right:0.1em;" class="iconify" data-icon="gridicons:pages" data-inline="false"></span>
		    ${page_name}
		</label>
		EOM

		pages_html="${pages_html}${page_html}\n"

	done

	indent=$(printf '\t%.0s' {1..11})

	# shellcheck disable=SC2086,SC2001
	pages_html="$(echo -e "${pages_html}" | sed "s|^|${indent}|g" | sed "s|@|-|g" | tee "${OUTPUT_DIR_PATH}/pages.html")"

	line_no=$(($(grep -n "FILL_PAGES_HERE" "${html_path}" | cut -d":" -f1) + 1))
	sed -i "${line_no} e cat \"${OUTPUT_DIR_PATH}/pages.html\"" "${html_path}"
}

create_unified_sheets_list()
{
	# Remove duplicates keeping the order
	local sheets=$(find "${OUTPUT_DIR_PATH}" -mindepth 3 -maxdepth 3 -name "sch_sheets" -exec cat -n {} \; | sort -k2 -k1n | sort -u -t"|" -k1,1 | uniq -f1 | sort -nk1,1 | cut -f2-)
	echo -e "${sheets}" | sed '/^$/d' | tee "${OUTPUT_DIR_PATH}/sch_sheets"
}

create_unified_layers_list()
{
	local layers=$(find "${OUTPUT_DIR_PATH}" -mindepth 3 -maxdepth 3 -name "pcb_layers" -exec cat {} \; | sort -u -t"|" -k1,1)
	echo -e "${layers}" | sed '/^$/d' | tee "${OUTPUT_DIR_PATH}/pcb_layers"
}

get_layer_color()
{
	local layer_id="${1}"

	# Layer IDs

	     F_Cu=0
	   In1_Cu=1
	   In2_Cu=2
	   In3_Cu=3
	   In4_Cu=4
	     B_Cu=31
	  B_Adhes=32
	  F_Adhes=33
	  B_Paste=34
	  F_Paste=35
	  B_SilkS=36
	  F_SilkS=37
	   B_Mask=38
	   F_Mask=39
	Dwgs_User=40
	Cmts_User=41
	Eco1_User=42
	Eco2_User=43
	Edge_Cuts=44
	   Margin=45
	  B_CrtYd=46
	  F_CrtYd=47
	    B_Fab=48
	    F_Fab=49

	case "${layer_id}" in
		"${B_Adhes}")    layer_color="#3545A8" ;;
		"${B_CrtYd}")    layer_color="#D3D04B" ;;
		"${B_Cu}")       layer_color="#359632" ;;
		"${B_Fab}")      layer_color="#858585" ;;
		"${B_Mask}")     layer_color="#943197" ;;
		"${B_Paste}")    layer_color="#969696" ;;
		"${B_SilkS}")    layer_color="#481649" ;;
		"${Cmts_User}")  layer_color="#7AC0F4" ;;
		"${Dwgs_User}")  layer_color="#0364D3" ;;
		"${Eco1_User}")  layer_color="#008500" ;;
		"${Eco2_User}")  layer_color="#008500" ;;
		"${Edge_Cuts}")  layer_color="#C9C83B" ;;
		"${F_Adhes}")    layer_color="#A74AA8" ;;
		"${F_CrtYd}")    layer_color="#A7A7A7" ;;
		"${F_Cu}")       layer_color="#952927" ;;
		"${F_Fab}")      layer_color="#C2C200" ;;
		"${F_Mask}")     layer_color="#943197" ;;
		"${F_Paste}")    layer_color="#3DC9C9" ;;
		"${F_SilkS}")    layer_color="#339697" ;;
		"${In1_Cu}")     layer_color="#C2C200" ;;
		"${In2_Cu}")     layer_color="#C200C2" ;;
		"${In3_Cu}")     layer_color="#C20000" ;;
		"${In4_Cu}")     layer_color="#0000C2" ;;
		"${Margin}")     layer_color="#D357D2" ;;
		*)               layer_color="" ;;
	esac

	echo "${layer_color}"
}

insert_layers_html()
{
	local html_path="${1}"

	local layer
	local layers

	local checked

	local layer_html
	local layers_html

	local layers=$(cat "${OUTPUT_DIR_PATH}/pcb_layers")

	i=0
	IFS=$'\n'
	for layer in ${layers}; do

		local layer_id=$(echo "${layer}" | cut -d "|" -f1)
		local layer_id_padding=$(printf "%02d" "$layer_id")
		local layer_name=$(echo "${layer}" | cut -d "|" -f2 | sed "s/\./_/g")
		local layer_color=$(get_layer_color "${layer_id}")

		if [[ "${i}" == "0" ]]; then
			checked="checked='checked'"
		else
			checked=""
		fi

		i=$((i + 1))

		read -r -d '' layer_html <<-EOM
		<!-- Layer ${i} -->
		<input  id="layer-${layer_id_padding}" value="layer-${layer_name}" type="radio" name="layers" onchange="change_layer()" ${checked}/>
		<label for="layer-${layer_id_padding}" id="label-${layer_id_padding}" data-toggle="tooltip" title="Layer ID: ${layer_id}" class="rounded text-sm-left list-group-item radio-box" onclick="change_layer_onclick()">
		    <span style="margin-left:0.5em; margin-right:0.1em; color: ${layer_color}" class="iconify" data-icon="teenyicons-square-solid" data-inline="false"></span>
		    ${layer_name}
		</label>
		EOM

		layers_html="${layers_html}${layer_html}\n"

	done

	indent=$(printf '\t%.0s' {1..11})

	# shellcheck disable=SC2086,SC2001
	layers_html="$(echo -e "${layers_html}" | sed "s|^|${indent}|g" | sed "s|@|-|g" | tee "${OUTPUT_DIR_PATH}/layers.html")"

	line_no=$(($(grep -n "FILL_LAYERS_HERE" "${html_path}" | cut -d":" -f1) + 1))
	sed -i "${line_no} e cat \"${OUTPUT_DIR_PATH}/layers.html\"" "${html_path}"
}

# ==========================================================================================
# ==========================================================================================
# ==========================================================================================
# ==========================================================================================
#
# NEW OR ORGANIZED CODE
#
# ==========================================================================================
# ==========================================================================================
# ==========================================================================================
# ==========================================================================================

# GLOBAL VARIABLES
export KIRI_PID
export KIRI_LAUNCH_PATH="$(realpath "$(pwd)")"
export KIRI_HOME_PATH
export KICAD_VESION
export KICAD_PRO_ABSOLUTE_PATH
export REPO_ABSOLUTE_PATH
export KICAD_PROJ_ABSOLUTE_PATH
export KICAD_PROJ_NAME
export OUTPUT_DIR_PATH
export WEB_DIR_PATH
export COMMITS

# GLOBAL FLAGS WITH DEFAULT OPTIONS
export ALL_COMMITS=0
export ARCHIVE_PROJECT=0
export DEBUG=0
export DEBUG_KIDIFF=0
export DEBUG_PLOTGITSCH=0
export DRY_RUN=0
export LAUNCH_BROWSER=1
export PAGE_FRAME=1
export REMOVE_KIRI_FOLDER=0
export SELECT_LAST_N_COMMITS
export SKIP_CACHE_LIB=0
export START_ON_LAYOUT_VIEW=0
export START_SERVER=1
export VERBOSE=0
export SKIP_KICAD_6=0

export NEWER_COMMIT
export OLDER_COMMIT
export WEBSERVER_PORT
export PLOTGITSCH_MISSING
export KIDIFF_MISSING

if [[ -z ${FORCE_PLOTTING_GRAPHICALLY} ]]; then
	export FORCE_PLOTTING_GRAPHICALLY=0
fi

# RAW COLORS
readonly RCO=$(printf "\e[0m")  # Reset COlors
readonly BTE=$(printf "\e[1m")  # Bolt TExt
readonly LGY=$(printf "\e[37m") # Light GraY
readonly LRE=$(printf "\e[91m") # Light REd
readonly LGR=$(printf "\e[92m") # Light GReen
readonly LYE=$(printf "\e[93m") # Light YEllow
readonly LBL=$(printf "\e[94m") # Light BLue
readonly LMA=$(printf "\e[95m") # Light MAgenta
readonly LCY=$(printf "\e[96m") # Light CYan

find()
{
	case ${OSTYPE} in
		darwin*)
			gfind "$@"
			;;
		*)
			command find "$@"
			;;
	esac
}

fmt()
{
	case ${OSTYPE} in
		darwin*)
			gfmt "$@"
			;;
		*)
			command fmt "$@"
			;;
	esac
}

readlink()
{
	case ${OSTYPE} in
		darwin*)
			greadlink -f "$@"
			;;
		*)
			command readlink -f "$@"
			;;
	esac
}

sed()
{
	case ${OSTYPE} in
		darwin*)
			gsed "$@"
			;;
		*)
			command sed "$@"
			;;
	esac
}

tac()
{
	case ${OSTYPE} in
		darwin*)
			tail -r
			;;
		*)
			command tac
			;;
	esac
}

# Handle Ctrl-C
cleanup_on_exit()
{
	# force to kill the childs
	pkill -P $$ --signal 9 &> /dev/null

	# Restore board bkps
	if [[ -f "${kicad_pcb}.bkp" ]]; then
		mv -f "${kicad_pcb}.bkp" "${kicad_pcb}" &> /dev/null
	fi

	# Remove some leftovers
	# rm -rf ${OUTPUT_DIR_PATH}
	# rm -rf sch[12]-*.svg

	exit 1
}

kiri_kill()
{
	# Auxiliar function to exit form inside functions
	kill -s TERM "${KIRI_PID}"
}

show_help()
{
	IFS= read -r -d '' HELP_MESSAGE <<-EOM
	USAGE:

	    kiri [OPTIONS] [KICAD_PROJECT]

	DESCRIPTION:

	    Kiri is a proof of concept script to automate the usage of
	    plotkicadsch (plotgitsch) and Kicad-Diff (kidiff) in a single easy-to-use tool.

	OPTIONS:

	     -a|--all         Include all commits even if schematics/layout don't have changes
	     -o|--older HASH  Show commits starting from this one
	     -n|--newer HASH  Show commits until this one delimited by this one
	     -t|--last VAL    Show last N commits

	     -l|--no-server   Do not launch webserver/browser at the end
	     -S|--server-only Start webserver but not launch browser
	     -p|--port PORT   Set webserver port. By default it will try to use an available port.

	     -s|--skip-cache  Skip usage of -chache.lib on plotgitsch
	     -6|--skip-kicad6 Skip ploting Kicad 6 schematics (.kicad.sch)
	     -u|--layout      Force starting with the Layout view selected
	     -f|--page-frame  Disable page frame for PCB

	     -d|--output-dir  Change output folder path/name
	     -r|--remove      Remove generated folder before running it
	     -x|--archive     Archive generate files

	     -v|--version     Show version
	     -h|--help        Show help

	     -D|--debug       Extra info
	    -dp|--debug-sch   Show Plotgitsch stdout and stderr
	    -dk|--debug-pcb   Show Kidiff stdout and stderr
	     -y|--dry-run     Run without generate artifacts
	     -V|--verbose     Verbose

	KICAD_PROJECT:

	    KICAD_PROJECT file is optional.
	    If it is missing the GUI file selector will be loaded

	EXAMPLES:

	    # Launch GUI with file selector
	    kiri

	    # Kicad project on the root of the repo
	    kiri board.pro

	    # Nested project (with verbose and starting fresh)
	    kiri nested-project/board.pro -r -D

	    # Nested project (Debugging issues)
	    kiri board.kicad_pro -r -D
	EOM

	printf "\n%s\n" "${HELP_MESSAGE}" | less
}

is_tool_avail()
{
	local tool=${1}
	local no_exit=${2}

	if ! command -v "${tool}" &> /dev/null; then
		if [[ "${no_exit}" != 1 ]]; then
			echo "ERROR: ${tool} could not be found" 1>&2
			exit 1
		else
			echo "${LBL}INFO: ${tool} is missing, skiping its use${RCO}" 1>&2
			return 1
		fi
	else
		return 0
	fi
}

check_required_tools()
{
	local no_exit=1

	readonly PLOTGITSCH_MISSING=$(is_tool_avail "plotgitsch" ${no_exit})
	readonly KIDIFF_MISSING=$(is_tool_avail "kidiff" ${no_exit})

	is_tool_avail "dos2unix"

	case ${OSTYPE} in
		darwin*)
			is_tool_avail "gsed"
			is_tool_avail "gfind"
			is_tool_avail "greadlink"
			;;
	esac
}

launch_project_selector_gui()
{
	local file_path

	if [[ -n ${DISPLAY} ]]; then
		export DISPLAY=:1.0
	fi

	if ! file_path=$(kiri-file-picker); then
		return $?
	fi

	echo "${file_path}"
}

get_project_repo_abspath()
{
	local dir_path="$(dirname "${KICAD_PRO_ABSOLUTE_PATH}")"
	cd "${dir_path}" &> /dev/null || exit

	if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
		git rev-parse --show-toplevel
	else
		echo "Error: The ${KICAD_PRO_ABSOLUTE_PATH} is not inside a git directory" >&2
		kiri_kill
	fi
}

get_project_nested_path()
{
	dirname "${KICAD_PRO_ABSOLUTE_PATH#"${REPO_ABSOLUTE_PATH}"/}"
}

command_line_parse()
{
	local output_dir=".kiri"

	while [[ ${#} -gt 0 ]]; do

		local key="${1}"

		case "${key}" in

			-a|--all)
				ALL_COMMITS=1
				shift
				;;

			-d|--output-dir)
				local output_dir=${2}
				shift 2
				;;

			-y|--dry-run)
				DRY_RUN=1
				START_SERVER=0
				VERBOSE=1
				shift
				;;

			-h|--help)
				show_help
				exit 0
				;;

			-l|--no-server)
				START_SERVER=0
				shift
				;;

			-n|--newer)
				NEWER_COMMIT="${2}"
				shift 2
				;;

			-t|--last)
				SELECT_LAST_N_COMMITS="${2}"
				shift 2
				;;

			-o|--older)
				OLDER_COMMIT="${2}"
				shift 2
				;;

			-r|--remove)
				REMOVE_KIRI_FOLDER=1
				shift
				;;

			-p|--port)
				WEBSERVER_PORT="${2}"
				shift 2
				;;

			-V|--verbose)
				VERBOSE=1
				shift
				;;

			-v|--version)
				show_tools_versions
				exit 0
				;;

			-D|--debug)
				DEBUG=1
				DEBUG_KIDIFF=1
				DEBUG_PLOTGITSCH=1
				shift
				;;

			-Dp|-DP|-dp|--debug-plotgitsch)
				DEBUG_PLOTGITSCH=1
				shift
				;;

			-Dk|-DK|-dk|--debug-kidiff)
				DEBUG_KIDIFF=1
				shift
				;;

			-x|--archive)
				ARCHIVE_PROJECT=1
				START_SERVER=0
				shift
				;;

			-s|--skip-cache)
				SKIP_CACHE_LIB=1
				shift
				;;

			-S|--server-only)
				LAUNCH_BROWSER=0
				shift
				;;

			-u|--layout)
				START_ON_LAYOUT_VIEW=1
				shift
				;;

			-f|--frame)
				PAGE_FRAME=0
				shift
				;;

			-6|--skip-kicad6)
				SKIP_KICAD_6=1
				shift
				;;

			--*|-*)
				echo "Unknown argument '${1}'"
				exit 1
				;;

			*)
				local kicad_pro_path="${1}"
				shift
				;;
		esac
	done

	# Select Kicad project with GUI if it was not passed
	# if [[ -z "${kicad_pro_path}" ]]; then
	# 	kicad_pro_path="$(launch_project_selector_gui)"
	# fi

	KICAD_PRO_ABSOLUTE_PATH=$(realpath "${kicad_pro_path/#\~/$HOME}" 2> /dev/null)
	if [[ ! -f ${KICAD_PRO_ABSOLUTE_PATH} ]]; then
		local kicad_pro_path=$(find ./ -maxdepth 1 -name "*\.pro" -o -name "*\.kicad_pro")
		KICAD_PRO_ABSOLUTE_PATH=$(realpath "${kicad_pro_path}" 2> /dev/null)
		if [[ ! -f ${KICAD_PRO_ABSOLUTE_PATH} ]]; then
			kicad_pro_path="$(launch_project_selector_gui)"
			KICAD_PRO_ABSOLUTE_PATH=$(realpath "${kicad_pro_path/#\~/$HOME}" 2> /dev/null)
			if [[ ! -f ${KICAD_PRO_ABSOLUTE_PATH} ]]; then
				printf "ERROR: Kicad's project file (.pro, .kicad_pro) \"%s\" is missing.\n\n" "${KICAD_PRO_ABSOLUTE_PATH}"
				exit 1
			fi
		fi
	fi

	readonly KICAD_PRO_ABSOLUTE_PATH
	readonly REPO_ABSOLUTE_PATH="$(get_project_repo_abspath)"
	readonly KICAD_PROJ_NESTED_PATH="$(get_project_nested_path)"

	readonly KICAD_PROJ_ABSOLUTE_PATH="${REPO_ABSOLUTE_PATH}/${KICAD_PROJ_NESTED_PATH}"
	cd "${KICAD_PROJ_ABSOLUTE_PATH}" || exit

	if [[ -n ${output_dir} ]]; then
		readonly OUTPUT_DIR_PATH=$(realpath "${output_dir}")
		mkdir -p "${OUTPUT_DIR_PATH}"
	else
		printf "ERROR: Output folder is empty\n"
		exit 1
	fi

	readonly WEB_DIR_PATH="${OUTPUT_DIR_PATH}/web/"
}

get_kicad_version()
{
	# kicad_version.py "$@"
	kicad_version "$@"
}

get_kidiff_version()
{
	local kidiff_repo_path
	local super_git_path
	local last_commit_hash
	local last_commit_date
	local submodule_version

	kidiff_repo_path=$(dirname "$(dirname "$(which kidiff)")")
	git_toplevel=$(git --git-dir "${kidiff_repo_path}/.git" rev-parse --show-toplevel)

	super_git_path="${kidiff_repo_path}/.git"
	submodule_git_path="${git_toplevel}/.git"

	# Using standalone cloned KiDiff project
	if [[ "${kidiff_repo_path}" == "${git_toplevel}" ]]; then
		last_commit_hash=$(git --git-dir "${super_git_path}" rev-parse --short HEAD)
		last_commit_date=$(git --git-dir "${super_git_path}" log -1 --format="%at" | xargs -I{} date -d @{} +"%Y/%m/%d %Hh%M")
		echo "${last_commit_hash} ${last_commit_date}"
	else
		# Using cloned KiDiff as KiRI submodule
		if [[ -d "${submodule_git_path}" ]]; then
		submodule_version=$(git --git-dir "${submodule_git_path}" submodule status -- "submodules/KiCad-Diff" | sed "s/^[ ]\+//g")
		echo "${submodule_version}"
		# Kidiff was not cloned from git so it does not have version
		else
			echo "(unknown version)"
		fi
	fi
}

get_kiri_version()
{
	local tool_path
	local git_dir_path
	local last_commit_hash
	local last_commit_date

	tool_path=$(dirname "$(dirname "$(which kiri)")")
	git_dir_path="${tool_path}/.git"

	if [[ -d "${git_dir_path}" ]]; then
		last_commit_hash=$(git --git-dir "${git_dir_path}" rev-parse --short HEAD)
		last_commit_date=$(git --git-dir "${git_dir_path}" log -1 --format="%at" | xargs -I{} date -d @{} +"%Y/%m/%d %Hh%M")
		echo "${last_commit_hash} ${last_commit_date}"
	else
		echo "Unknown"
	fi
}

show_tools_versions()
{
	IFS= read -r -d '' VERSION <<-EOM
	    plotgitsch $(plotgitsch --version)
	    kidiff $(get_kidiff_version)
	    $(basename "${0}") $(get_kiri_version)
	EOM

	printf "\n%s\n" "$VERSION"
}

get_file_without_extention()
{
	local filename="$(basename "${1}")"
	echo "${filename%.*}"
}

get_file_extension()
{
	echo "${1##*.}"
}

get_schematic_vesion()
{
	local kicad_sch="${1}"
	local file_extension=$(get_file_extension "${kicad_sch}")

	case ${file_extension} in

		sch)
			# Format:
			# EESchema Schematic File Version 4
			grep -i "File Version" "${kicad_sch}" -m 1 | cut -d" " -f5
			;;

		kicad_sch)
			# Format
			# (kicad_sch (version 20211123) (generator eeschema)
			grep -i "kicad_sch" "${kicad_sch}" -m 1 | sed "s/[()]//g" | cut -d" " -f3
			;;
	esac
}

get_layout_version()
{
	# (kicad_pcb (version 4) (host kicad "dummy file") )
	# (kicad_pcb (version 20171130) (host pcbnew "(5.0.0-rc2-76-gb5f63567d)")
	# (kicad_pcb (version 20171130) (host pcbnew "(5.1.6)-1")
	# (kicad_pcb (version 20171130) (host pcbnew 5.0.0-rc3-unknown-eaf938c~65~ubuntu18.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.0.1-33cea8e~67~ubuntu18.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.1.5+dfsg1-2~bpo10+1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.1.6-c6e7f7d~86~ubuntu20.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 6.0.0-rc1-unknown-da35b16~65~ubuntu18.04.1)
	# (kicad_pcb (version 20200104) (host pcbnew "(5.99.0-879-ga0698723b)")
	# (kicad_pcb (version 20210606) (generator pcbnew)

	local kicad_pcb="${1}"
	head -n1 "${kicad_pcb}" | sed "s/[()]//g" | cut -d" " -f3
}

set_default_html_view()
{
	local kicad_sch="${1}"

	# Kicad-6 boards do not have a schematic view working yet
	if [[ $(get_schematic_vesion "${kicad_sch}") -ge 20211014 ]]; then
		START_ON_LAYOUT_VIEW=1
	fi

	if [[ "${START_ON_LAYOUT_VIEW}" == 1 ]]; then
		echo "- Setting initial view to layout"
		sed -i "s/default_view = \"schematic\";/default_view = \"layout\";/g" "${WEB_DIR_PATH}/kiri.js"
	fi
}

get_git_commits()
{
	local files=("${@}")
	local current_git_branch=$(git rev-parse --abbrev-ref HEAD)

	command_end=1>&2

	local cmd="git log --date=format:'%Y-%m-%d %H:%M:%S' --pretty='format:%h | %ad | %an | %s' ${current_git_branch} -- ${files[@]}"
	if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" == "1" ]]; then
		echo -e "${LBL}Get commits command${RCO}" 1>&2
		echo -e "   ${LYE}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g' 1>&2
		echo 1>&2
	fi
	eval "$(echo "${cmd}" | tr "\n" " ")"
	ret="${?}"
	if [[ "${ret}" -gt "0" ]]; then
		echo -e "${LRE}Status: ${ret}${RCO}\n" 1>&2
	fi
}

get_name_of_current_user()
{
	case ${OSTYPE} in
		darwin*)
			username=$(id -F)
			;;
		*)
			username=$(getent passwd "${USER:-Local User}" | cut -d: -f5 | cut -d, -f1;)
			;;
	esac

	if [[ -n ${username} ]]; then
		echo "${username}"
	else
		echo "${USER}"
	fi
}

git_files_have_changes()
{
	local files=("${@}")
	local has_changes="No"
	local ret=0
	local file

	if [[ "${DEBUG}" == "1" ]]; then
		echo "${LBL}Checking local changes${RCO}" 2>&1
	fi

	uniq_files=($(for f in "${files[@]}"; do echo "${f}"; done | sort -u))

	for file in "${uniq_files[@]}"; do
		if [[ -n "${file}" ]]; then
			if ! git diff --exit-code -- "${KICAD_PROJ_NESTED_PATH}/${file}" > /dev/null; then
				if [[ "${DEBUG}" == "1" ]]; then
					echo "[x] ${KICAD_PROJ_NESTED_PATH}/${file}" 2>&1
				fi
				has_changes="Yes"
				ret=1
			else
				if [[ "${DEBUG}" == "1" ]]; then
					echo "[ ] ${KICAD_PROJ_NESTED_PATH}/${file}" 2>&1
				fi
			fi
		fi
	done
	if [[ "${DEBUG}" == "1" ]]; then
		echo "${LBL}Files have local changes? ${LRE}${has_changes}${RCO}" 2>&1
	fi

	return ${ret}
}

get_git_commits_list()
{
	local kicad_pro="${1}"
	local kicad_sch="${2}"
	local kicad_pcb="${3}"
	local extra_sch_files="${4}"

	if [[ "${ALL_COMMITS}" == "1" ]]; then
		COMMITS=$(get_git_commits)
	else
		COMMITS=$(get_git_commits "${kicad_sch}" "${extra_sch_files}" "${kicad_pcb}")
	fi

	if [[ -n "${OLDER_COMMIT}" ]]; then
		if [[ "${VERBOSE}" == "1" ]]; then
			echo "  Older commit: ${OLDER_COMMIT}"
		fi
		COMMITS=$(echo "${COMMITS}" | sed "/^${OLDER_COMMIT}/q")
	fi

	if [[ -n "${NEWER_COMMIT}" ]]; then
		if [[ "${VERBOSE}" == "1" ]]; then
			echo "  Newer commit: ${NEWER_COMMIT}"
			echo
		fi
		COMMITS=$(echo "${COMMITS}" | sed -n "/^${NEWER_COMMIT}/,\$p")
	fi

	if [[ -n "${SELECT_LAST_N_COMMITS}" ]]; then
		COMMITS=$(echo "${COMMITS}" | head -n "${SELECT_LAST_N_COMMITS}")
	fi

	# Append local files only if they have changes
	if ! git_files_have_changes "${kicad_pcb}" "${kicad_sch}" "${extra_sch_files}"; then
		IFS= read -r -d '' COMMITS <<-EOM
		_local_ | $(date "+%Y-%m-%d %H:%M:%S") | $(get_name_of_current_user "${USER}") | Local, staged and unstaged, changes
		${COMMITS}
		EOM
	fi

	# Commits list has to have 2 commits at least
	if [[ $(echo "${COMMITS}" | wc -l ) -lt 2 ]]; then
		echo "Leaving, less than 2 commits found"
		exit 1
	fi

	if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
		echo -e "\n${LBL}Commits list${RCO}"
		echo "${COMMITS}" | column -t -s "|" | nl | cut -c -$(($(tput cols)-4))
	fi
}

export_project_files()
{
	local commit_hash="${1}"

	if [[ "${DEBUG}" == "1" ]]; then
		echo -e "\n${LBL}Retrieving commits:${RCO}"
		echo -e "- Source path: ${KICAD_PROJ_ABSOLUTE_PATH}"
		echo -e "- Output path: ${OUTPUT_DIR_PATH}/${commit_hash}"
	fi

	if [[ "${commit_hash}" == "_local_" ]]; then
		mkdir -p "${OUTPUT_DIR_PATH}/_local_"
		cp -r * "${OUTPUT_DIR_PATH}/_local_"
	else
		mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash}"
		git archive --format=tar ${commit_hash} | (cd "${OUTPUT_DIR_PATH}/${commit_hash}" && tar xf -)
	fi

	if [[ "${DEBUG}" == "1" ]]; then
		echo
	fi
}

# Maybe duplicated
get_kicad_pro_extension()
{
	local kicad_project_path="${1}"

	# Find's project version on that commit
	kicad_pro=$(find "${OUTPUT_DIR_PATH}/${commit_hash}/" -name "*.kicad_pro")
	if [[ -z ${kicad_pro} ]]; then
		kicad_pro=$(find "${OUTPUT_DIR_PATH}/${commit_hash}/" -name "*.pro")
	fi

	get_file_extension "${kicad_pro}"
}

# Maybe duplicated
get_kicad_pro_filename()
{
	local kicad_project_path="${1}"

	# Find's project version on that commit
	local kicad_pro=$(find "${OUTPUT_DIR_PATH}/${commit_hash}/" -name "*.kicad_pro")
	if [[ -z ${kicad_pro} ]]; then
		local kicad_pro=$(find "${OUTPUT_DIR_PATH}/${commit_hash}/" -name "*.pro")
	fi

	get_file_without_extention "${kicad_pro}"
}

parse_schematic_pages()
{
	# This function creates a list of pages of the project
	# Format:
	# FILENAME_WIITHOUT_EXTENSION|FILE_PATH_RELATIVE_TO_PROJ_ROOT|INSTANCE_UUID|INSTANCE_NAME|KICAD_HIERARCHY"

	local kicad_sch="${1}"

	local kicad_sch_dir_path="$(dirname "${kicad_sch}")"
	local main_page_name="$(get_file_without_extention "${kicad_sch}")"
	local main_page_basename="$(basename "${kicad_sch}")"
	local sch_extension="$(get_file_extension "${kicad_sch}")"

	cd ${kicad_sch_dir_path} &> /dev/null || exit

	case ${sch_extension} in

		"sch")
			pages=($(find_kicad5_sch_hier "${main_page_name}.${sch_extension}"))
			printf "%s\n" "${pages[@]}"
			;;

		"kicad_sch")
			pages=($(find_kicad6_sch_hier "${main_page_name}.${sch_extension}"))
			printf "%s\n" "${pages[@]}"
		;;
	esac

	cd - &> /dev/null || exit
}

create_project_info()
{
	local commit_hash="${1}"
	local kicad_pro="${2}"
	mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash}/kiri/"
	printf "%s\n" "${kicad_pro}" > "${OUTPUT_DIR_PATH}/${commit_hash}/kiri/pro_infos"
}

create_list_of_pages()
{
	local commit_hash="${1}"
	local kicad_sch="${2}"
	local pages=$(parse_schematic_pages "${kicad_sch}")

	if [[ "${DEBUG}" == "1" ]]; then
		echo -e "\n${kicad_sch}"
		echo -e "${LBL}Pages:${RCO}"
		echo -e "${pages}" | nl -s": "
	fi

	mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash}/kiri/"
	printf "%s\n" "${pages}" > "${OUTPUT_DIR_PATH}/${commit_hash}/kiri/sch_sheets"
}

parse_layout_layers()
{
	# This function get the list of layers of a PCB
	# Format:
	# LAYER_ID|LAYER_NAME [LAYER_NAME_KICAD]

	local kicad_pcb="${1}"

	# Kicad .kicad_pcb format:
	# (2 "In2.Cu" power|signal|user hide "Pwr")

	local layers=$( \
		sed -n '/^  (layers/,/  )$/{/^  (layers/!{/  )$/!p}}' "${kicad_pcb}" | \
		sed "s/^[ \t]\+//g" | \
		sed "s/[()]//g" | \
		sed "s/\r$//g" | \
		sed "s/\"//g" | \
		sed '/^[[:space:]]*$/d' | \
		sed -r "s/ (signal|user|power|hide)//g" | \
		awk -F '[ ]' '{if ($3) {printf "%s|%s\n", $1, $3} else {printf "%s|%s\n", $1, $2}}')

	printf "%s\n" "${layers}"
}

create_list_of_layers()
{
	local commit_hash="${1}"
	local kicad_pcb="${2}"
	local layers=$(parse_layout_layers "${kicad_pcb}")

	if [[ "${DEBUG}" == "1" ]]; then
		echo -e "\n${kicad_pcb}"
		echo -e "${LBL}Layers:${RCO}"
		echo -e "${layers}\n" | column -t | nl -s": "
	fi

	mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash}/kiri/"
	printf "%s\n" "${layers}" > "${OUTPUT_DIR_PATH}/${commit_hash}/kiri/pcb_layers"
}

manual_schematic_plot()
{
	local commit_hash="${1}"
	local kicad_sch="${2}"
	local kicad_cache_lib="${3}"

	local command_end="&> /dev/null"
	if [[ "${DEBUG}" == 1 ]] || [[ "${DEBUG_PLOTGITSCH}" == 1 ]]; then
		command_end=""
	fi

	cd "${OUTPUT_DIR_PATH}/${commit_hash}/" &> /dev/null || exit

	if [[ "$(get_file_extension "${kicad_sch}")" == "kicad_sch" ]] || [[ ${FORCE_PLOTTING_GRAPHICALLY} == "1" ]]; then

		if [[ "${SKIP_KICAD_6}" == "0" ]] && [[ ! "${OSTYPE}" =~ "darwin" ]]; then

			if [[ -z ${PLOTSCH_TIMEOUT} ]]; then
				PLOTSCH_TIMEOUT=15
			fi

			cmd="timeout ${PLOTSCH_TIMEOUT} plot_kicad_sch ${kicad_sch} ${command_end}"
			if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
				echo -e "\n   ${LMA}Plotting ${commit_hash}, ${OUTPUT_DIR_PATH}/${commit_hash}/${RCO}"
				echo -e "   ${LYE}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g'
			fi
			eval "${cmd}" ${command_end} | sed "s/^/   ${LGY}| /g" | sed "s/$/${RCO}/g"
			ret="${PIPESTATUS[0]}"
			if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
				if [[ "${ret}" -gt "0" ]]; then
					echo -e "${LRE}${BTE}   Status: ${ret}${RCO}"
				fi
				echo
			fi

		else
			if [[ "${SKIP_KICAD_6}" == "1" ]]; then
				echo -e "   ${LBL}Plot schematic plot was disabled"
			else

				if [[ "${OSTYPE}" =~ "darwin" ]]; then

					cmd="plot_kicad_sch_macos ${kicad_sch} ${command_end}"
					if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
						echo -e "\n   ${LMA}Plotting ${commit_hash}, ${OUTPUT_DIR_PATH}/${commit_hash}/${RCO}"
						echo -e "   ${LYE}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g'
					fi
					eval "${cmd}" ${command_end} | sed "s/^/   ${LGY}| /g" | sed "s/$/${RCO}/g"
					ret="${PIPESTATUS[0]}"
					if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
						if [[ "${ret}" -gt "0" ]]; then
							echo -e "${LRE}${BTE}   Status: ${ret}${RCO}"
						fi
						echo
					fi

				fi
			fi
		fi

	else

		if [[ -f "${kicad_sch}" ]]; then

			all_kicad_sch_files=("${kicad_sch}" $(get_kicad_sch_pages "${kicad_sch}" ${commit_hash}))

			svg_dir_path="${OUTPUT_DIR_PATH}/${commit_hash}/kiri/sch"
			mkdir -p "${svg_dir_path}"

			IFS=$'\n'
			for kicad_sch_aux in "${all_kicad_sch_files[@]}"; do

				if [[ ! ${SKIP_CACHE_LIB} == 1 ]]; then
					# TODO: kicad_cache_lib_1 and kicad_cache_lib_2 may differ
					if [[ -n "${kicad_cache_lib}" ]]; then
						local cache_lib_param="-l ${kicad_cache_lib}"
					fi
				fi

				if [[ -f "${kicad_cache_lib}" ]]; then

					cmd="plotkicadsch -f ${kicad_sch_aux} ${cache_lib_param} -o \"${svg_dir_path}\" ${command_end}"
					if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
						echo -e "   ${LMA}Ploting ${commit_hash}, ${OUTPUT_DIR_PATH}/${commit_hash}/${RCO}"
						echo -e "   ${LYE}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g'
					fi
					eval "${cmd}" ${command_end} | sed "s/^/   ${LGY}| /g" | sed "s/$/${RCO}/g"
					ret="${PIPESTATUS[0]}"
					if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
						if [[ "${ret}" -gt "0" ]]; then
							echo -e "${LRE}${BTE}   Status: ${ret}${RCO}"
						fi
					fi

					if [[ "${ret}" == "0" ]]; then

						# TODO: Needs tests, since it may not be generating other pages,
						# or they may need to have names improved
						local board_name=$(get_file_without_extention "${kicad_sch_aux}")
						if [[ -f "${svg_dir_path}/${board_name}.svg" ]]; then
							# TODO: How to force fix of the viewbox when the images are off center?
							plotgitsch_svg_tweaks "${svg_dir_path}/${board_name}.svg"| sed "s/^/   ${LGY}| /g" | sed "s/$/${RCO}/g"

							# svg_dir_path="${OUTPUT_DIR_PATH}/${commit_hash}/kiri/sch"
							# mkdir -p "${svg_dir_path}"
							# cp -f "${svg_dir_path}/${board_name}.svg" "from_${board_name}.svg"
							# cmd="git-imgdiff \"from_${board_name}.svg\""
							# if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
							# 	echo -e "   ${LMA}Ploting ${commit_hash}, ${OUTPUT_DIR_PATH}/${commit_hash}/${RCO}"
							# 	echo -e "   ${LYE}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g'
							# fi
							# eval "${cmd}" ${command_end} | sed "s/^/   ${LGY}| /g" | sed "s/$/${RCO}/g"
							# ret="${PIPESTATUS[0]}"
							# if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
							# 	if [[ "${ret}" -gt "0" ]]; then
							# 		echo -e "${LRE}${BTE}   Status: ${ret}${RCO}"
							# 	fi
							# fi
						fi

					else

						# echo -e "\n   ${LRE}Plotkicadsch has failed, using another way instead.${RCO}"

						if [[ "${SKIP_KICAD_6}" == "0" ]] && [[ ! "${OSTYPE}" =~ "darwin" ]]; then

							PLOTPCB_TIMEOUT=5

							# TESTING: Plokicadsch has failed, then usig GUI
							# IF THIS IS GOOD. Then it is better to organize this function main_if order here to avoid repetition
							cmd="timeout ${PLOTPCB_TIMEOUT} plot_kicad_sch ${kicad_sch} ${command_end}"
							ret=${?}
							if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
								echo -e "   ${LMA}Plotting ${commit_hash}, ${OUTPUT_DIR_PATH}/${commit_hash}/${RCO}"
								echo -e "   ${LYE}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g'
							fi
							eval "${cmd}" | sed "s/^/   ${LGY}| /g" | sed "s/$/${RCO}/g"
							ret="${?}"
							if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
								echo
								if [[ "${ret}" -gt "0" ]]; then
									echo -e "${LRE}${BTE}   Status: ${ret}${RCO}"
								fi
							fi

							# plot_kicad_sch plots all pages at once, then break
							break

						else

							if [[ "${OSTYPE}" =~ "darwin" ]]; then

								cmd="plot_kicad_sch_macos ${kicad_sch} ${command_end}"
								if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
									echo -e "\n   ${LMA}Plotting ${commit_hash}, ${OUTPUT_DIR_PATH}/${commit_hash}/${RCO}"
									echo -e "   ${LYE}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g'
								fi
								eval "${cmd}" | sed "s/^/   ${LGY}| /g" | sed "s/$/${RCO}/g"
								ret="${PIPESTATUS[0]}"
								if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
									if [[ "${ret}" -gt "0" ]]; then
										echo -e "${LRE}${BTE}   Status: ${ret}${RCO}"
									fi
									echo
								fi

								# plot_kicad_sch_macos plots all pagest at once, then break
								break
							fi
						fi
					fi
				fi
			done
		fi
	fi

	cd - &> /dev/null || exit
}

generate_schematic_artifacts()
{
	local commit_hash_1="${1}"
	local commit_hash_2="${2}"
	local kicad_sch_1="${3}"
	local kicad_sch_2="${4}"
	local kicad_cache_lib_1="${5}"
	local kicad_cache_lib_2="${6}"
	local i="${7}"

	if [[ ! "${PLOTGITSCH_MISSING}" == 1 ]]; then

		if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_KIDIFF}" == "1" ]]; then
			echo
		fi

		local command_end="&> /dev/null"
		if [[ "${DEBUG}" == 1 ]] || [[ "${DEBUG_PLOTGITSCH}" == 1 ]]; then
			command_end=""
		fi

		# plotgitsch requires an empty string when plotting local changes
		commit_hash_aux_1="${commit_hash_1}"
		commit_hash_aux_2="${commit_hash_2}"
		if [[ "${commit_hash_1}" == "_local_" ]]; then commit_hash_aux_1=""; fi
		if [[ "${commit_hash_2}" == "_local_" ]]; then commit_hash_aux_2=""; fi

		# When both commits are .sch then use plotgitsch (this already processes all pages)
		# Skip plotgitsch when both commits are .kicad_sch
		# Then plotkicadsch for each .sch (processing all pages) and skip .kicad_sch files

		local kicad_sch_extension_1=$(get_file_extension "${kicad_sch_1}")
		local kicad_sch_extension_2=$(get_file_extension "${kicad_sch_2}")

		if { [[ "${kicad_sch_extension_1}" == "sch" ]] && [[ "${kicad_sch_extension_2}" == "sch" ]]; } && [[ "${FORCE_PLOTTING_GRAPHICALLY}" == "0" ]]; then

			local removed_color="FF0000"
			local added_color="008FFF"
			local unchanged_color="FFFFFF"
			local background_color="222222"
			local color_scheme="-c ${removed_color}:${added_color}:${unchanged_color}:${background_color} ${commit_hash_aux_1} ${commit_hash_aux_2}"

			if [[ "${KICAD_PROJ_NESTED_PATH}" != "." ]]; then
				relative_path="-r ${KICAD_PROJ_NESTED_PATH}"
			fi

			if [[ ! ${SKIP_CACHE_LIB} == 1 ]]; then
				# TODO: kicad_cache_lib_1 and kicad_cache_lib_2 may differ
				if [[ -f "${kicad_cache_lib_1}" ]]; then
					cache_lib="-l ${kicad_cache_lib_1}"
				else
					if [[ -f "${kicad_cache_lib_2}" ]]; then
						cache_lib="-l ${kicad_cache_lib_2}"
					fi
				fi
			fi

			# Configure git-imagediff used by plotgitsch
			export IMGDIFF_SVG1_DIR_PATH="${OUTPUT_DIR_PATH}/${commit_hash_1}/kiri/sch"
			export IMGDIFF_SVG2_DIR_PATH="${OUTPUT_DIR_PATH}/${commit_hash_2}/kiri/sch"
			mkdir -p "${IMGDIFF_SVG1_DIR_PATH}"
			mkdir -p "${IMGDIFF_SVG2_DIR_PATH}"
			cmd="plotgitsch --keep --allow_missing ${relative_path} ${cache_lib} ${color_scheme} ${command_end}"
			if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
				echo -e "   ${LYE}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g'
			fi
			if [[ "${DRY_RUN}" == "0" ]]; then
				eval "${cmd}" | sed "s/^/   ${LGY}| /g" | sed "s/$/${RCO}/g"
				ret="${PIPESTATUS[0]}"
				if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
					if [[ "${ret}" -gt "0" ]]; then
						echo -e "${LRE}${BTE}   Status: ${ret}${RCO}"
					fi
					echo
				fi
			fi

		else

			# This one is needed only once since it is always the same
			if [[ "${i}" == "2" ]]; then
				manual_schematic_plot "${commit_hash_1}" "${kicad_sch_1}" "${kicad_cache_lib_1}"
			fi
			manual_schematic_plot "${commit_hash_2}" "${kicad_sch_2}" "${kicad_cache_lib_2}"

		fi
	fi

	if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_PLOTGITSCH}" == "1" ]]; then
		echo
	fi
}

generate_layout_artifacts()
{
	local commit_hash_1="${1}"
	local commit_hash_2="${2}"
	local kicad_pcb_1="${3}"
	local kicad_pcb_2="${4}"
	local kicad_project_name_1="${5}"
	local kicad_project_name_2="${6}"

	if [[ ! "${KIDIFF_MISSING}" == 1 ]]; then

		local command_end="&> /dev/null"
		if [[ "${DEBUG}" == 1 ]] || [[ "${DEBUG_KIDIFF}" == 1 ]]; then
			command_end=""
		fi

		# Kidiff does local diff using ${kicad_pcb} name, so update it here
		if [[ "${commit_hash_1}" == "_local_" ]]; then commit_hash_1="${kicad_pcb_1}"; fi
		if [[ "${commit_hash_2}" == "_local_" ]]; then commit_hash_2="${kicad_pcb_2}"; fi

		if [[ ${PAGE_FRAME} == "1" ]]; then
			page_frame_parameter="-f"
		fi

		local cmd="kidiff \"${kicad_pcb}\" -n --webserver-disable -a ${commit_hash_1} -b ${commit_hash_2} -o \"${OUTPUT_DIR_PATH}\" ${page_frame_parameter} ${command_end}"

		if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_KIDIFF}" == "1" ]]; then
			echo -e "   ${LGR}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g'
		fi
		if [[ "${DRY_RUN}" == "0" ]]; then
			eval "${cmd}" | sed "s/^/   ${LGY}| /g" | sed "s/$/${RCO}/g"
			ret="${PIPESTATUS[0]}"
			if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_KIDIFF}" == "1" ]]; then
				if [[ "${ret}" -gt "0" ]]; then
					echo -e "${LRE}${BTE}   Status: ${ret}${RCO}"
				fi
				echo
			fi
		fi

		# Revert commits back to _local_ to finish the cleanup
		if [[ "${commit_hash_1}" == "${kicad_pcb_1}" ]]; then commit_hash_1="_local_"; fi
		if [[ "${commit_hash_2}" == "${kicad_pcb_2}" ]]; then commit_hash_2="_local_"; fi

		mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash_1}/kiri/pcb/"
		mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash_2}/kiri/pcb/"

		# Fix folder name, kidiff generates local instead of _local_
		if [[ -d "${OUTPUT_DIR_PATH}/local/" ]]; then
			if [[ -d "${OUTPUT_DIR_PATH}/_local_/" ]]; then
				mv "${OUTPUT_DIR_PATH}/local/"* "${OUTPUT_DIR_PATH}/_local_/" &> /dev/null
			fi
			rm -fr "${OUTPUT_DIR_PATH}/local" &> /dev/null
		fi

		# Rename files folowing format: layer-xx.svg
		rename "s/${kicad_project_name_1}-/layer-/" "${OUTPUT_DIR_PATH}/${commit_hash_1}/"*.svg &> /dev/null
		rename "s/${kicad_project_name_2}-/layer-/" "${OUTPUT_DIR_PATH}/${commit_hash_2}/"*.svg &> /dev/null

		# Organize renamed files
		mv "${OUTPUT_DIR_PATH}/${commit_hash_1}/layer-"*.svg "${OUTPUT_DIR_PATH}/${commit_hash_1}/kiri/pcb/" &> /dev/null
		mv "${OUTPUT_DIR_PATH}/${commit_hash_2}/layer-"*.svg "${OUTPUT_DIR_PATH}/${commit_hash_2}/kiri/pcb/" &> /dev/null
	fi
}

generate_diffs()
{
	hashs=$(echo "${COMMITS}" | tac | cut -d' '  -f1 | tac);
	n_hashs=$(echo "${hashs}" | wc -w | sed "s/^[ \t]\+//g")
	n_comparisons=$(echo "${n_hashs} * $((n_hashs-1)) " | bc)

	# Check for local changes
	echo -e "\n${LBL}Artiffacts Summary${RCO}"
	if echo "${COMMITS}" | cut -d' '  -f1 | grep "_local_" -q; then
		echo "$((n_hashs-1)) commits and local changes, totaling $((n_comparisons+1)) possible comparisons"
	else
		echo "${n_hashs} commits, totaling ${n_comparisons} possible comparisons"
	fi

	echo -e "\n${LBL}Generating artifacts (may take some time)${RCO}"

	local i=0
	IFS=$'\n'
	for hash_1 in ${hashs}; do

		local j=0
		for hash_2 in ${hashs}; do

			if [[ "${hash_1}" != "${hash_2}" ]]; then

				i=$((i+1))
				j=$((j+1))

				if [[ -d "${OUTPUT_DIR_PATH}/${hash_2}" ]]; then
					continue
				fi

				if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_PLOTGITSCH}" == "1" ]] || [[ "${DEBUG_KIDIFF}" == "1" ]]; then
					local padding=0
					local total="/${n_comparisons}"
				else
					local padding=$(($(python -c "import math; print(int(math.log10(${n_comparisons}))+1)")-1))
					local total=""
				fi

				if [[ ${j} == 1 ]]; then
					# Commit 1
					item=$(echo "$COMMITS" | grep "^${hash_1}")
					printf "%${padding}d${total} %s\n" "${i}" "${item}" | cut -c -$(($(tput cols)-4))
					# Commit 2
					i=$((i+1))
					item=$(echo "$COMMITS" | grep "^${hash_2}")
					printf "%${padding}d${total} %s\n" "${i}" "${item}" | cut -c -$(($(tput cols)-4))
				else
					item=$(echo "$COMMITS" | grep "^${hash_2}")
					printf "%${padding}d${total} %s\n" "${i}" "${item}" | cut -c -$(($(tput cols)-4))
				fi

				if [[ ${j} == 1 ]]; then
					mkdir -p "${OUTPUT_DIR_PATH}/${hash_1}/"
					export_project_files "${hash_1}"
				fi
				mkdir -p "${OUTPUT_DIR_PATH}/${hash_2}/"
				export_project_files "${hash_2}"


				if [[ "${j}" == "1" ]]; then

					local kicad_pro_1="$(get_kicad_pro "${OUTPUT_DIR_PATH}/${hash_1}")"
					local kicad_pro_extension_1="$(get_file_extension "${kicad_pro_1}")"
					local kicad_project_name_1="$(get_file_without_extention "${kicad_pro_1}")"
					local kicad_sch_1="$(get_kicad_sch "${OUTPUT_DIR_PATH}/${hash_1}" "${kicad_project_name_1}" "${kicad_pro_extension_1}")"
					local kicad_pcb_1="$(get_kicad_pcb "${OUTPUT_DIR_PATH}/${hash_1}" "${kicad_project_name_1}")"
					local kicad_sch_pages_1="$(get_kicad_sch_pages "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_sch_1}" ${hash_1})"
					local kicad_cache_lib_1="$(get_kicad_cache_lib "${OUTPUT_DIR_PATH}/${hash_1}" "${kicad_project_name_1}")"
					if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
						echo
					fi

					show_project_files "${OUTPUT_DIR_PATH}/${hash_1}" "${kicad_pro_1}" "${kicad_sch_1}" "${kicad_pcb_1}" "${kicad_cache_lib_1}"
				fi
				local kicad_pro_2="$(get_kicad_pro "${OUTPUT_DIR_PATH}/${hash_2}")"
				local kicad_pro_extension_2="$(get_file_extension "${kicad_pro_2}")"
				local kicad_project_name_2="$(get_file_without_extention "${kicad_pro_2}")"
				local kicad_sch_2="$(get_kicad_sch "${OUTPUT_DIR_PATH}/${hash_2}" "${kicad_project_name_2}" "${kicad_pro_extension_2}")"
				local kicad_pcb_2="$(get_kicad_pcb "${OUTPUT_DIR_PATH}/${hash_2}" "${kicad_project_name_2}")"
				local kicad_sch_pages_2="$(get_kicad_sch_pages "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_sch_2}" ${hash_2})"
				local kicad_cache_lib_2="$(get_kicad_cache_lib "${OUTPUT_DIR_PATH}/${hash_2}" "${kicad_project_name_2}")"

				if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
					echo
				fi
				show_project_files "${OUTPUT_DIR_PATH}/${hash_2}" "${kicad_pro_2}" "${kicad_sch_2}" "${kicad_pcb_2}" "${kicad_cache_lib_2}"

				if [[ "${j}" == "1" ]]; then
					create_project_info "${hash_1}" "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_pro_1}"
					create_list_of_pages "${hash_1}" "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_sch_1}"
					create_list_of_layers "${hash_1}" "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_pcb_1}"
				fi
				create_project_info "${hash_2}" "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_pro_2}"
				create_list_of_pages "${hash_2}" "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_sch_2}"
				create_list_of_layers "${hash_2}" "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_pcb_2}"

				generate_schematic_artifacts "${hash_1}" "${hash_2}" "${kicad_sch_1}" "${kicad_sch_2}" "${kicad_cache_lib_1}" "${kicad_cache_lib_2}" "${i}"
				generate_layout_artifacts "${hash_1}" "${hash_2}" "${kicad_pcb_1}" "${kicad_pcb_2}" "${kicad_project_name_1}" "${kicad_project_name_2}"
			fi
		done
	done
}

build_main_html()
{
	local kicad_pro="$(get_kicad_pro "${KICAD_PROJ_ABSOLUTE_PATH}")"
	local kicad_pro_extension="$(get_file_extension "${kicad_pro}")"
	local kicad_proj_name="$(get_file_without_extention "${kicad_pro}")"
	local kicad_sch="$(get_kicad_sch "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}" "${kicad_pro_extension}")"
	local kicad_pcb="$(get_kicad_pcb "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")"
	local kicad_sch_pages="$(get_kicad_sch_pages "${KICAD_PROJ_ABSOLUTE_PATH}/${kicad_sch}")"
	local kicad_cache_lib="$(get_kicad_cache_lib "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")"
	show_project_files "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_pro}" "${kicad_sch}" "${kicad_pcb}" "${kicad_cache_lib}"

	mkdir -p "${WEB_DIR_PATH}/"

	# Remove Kidiff leftovers
	rm -rf "${WEB_DIR_PATH}/triptych"

	echo -e "\n${LBL}Assembling the HTML${RCO}"

	# Copy assets
	main_html=index.html
	cp -f "${KIRI_HOME_PATH}/assets/${main_html}"  "${WEB_DIR_PATH}/"
	cp -f "${KIRI_HOME_PATH}/assets/kiri.js"       "${WEB_DIR_PATH}/"
	cp -f "${KIRI_HOME_PATH}/assets/kiri.css"      "${WEB_DIR_PATH}/"
	cp -f "${KIRI_HOME_PATH}/assets/blank.svg"     "${WEB_DIR_PATH}/"
	cp -f "${KIRI_HOME_PATH}/assets/favicon.ico"   "${WEB_DIR_PATH}/"
	cp -f "${KIRI_HOME_PATH}/assets/redirect.html" "${WEB_DIR_PATH}/../index.html"
	cp -f "${KIRI_HOME_PATH}/bin/kiri-server"      "${OUTPUT_DIR_PATH}/"

	# Index of the initial commits (in the COMMITS list)
	commit1_i=0
	commit2_i=1

	# Select initial commits
	local commit_hash_1=$(echo "${COMMITS}" | head -n$((commit1_i + 1)) | tail -n1 | cut -d" " -f1)
	local commit_hash_2=$(echo "${COMMITS}" | head -n$((commit2_i + 1)) | tail -n1 | cut -d" " -f1)

	local sheets=$(create_unified_sheets_list)
	local layers=$(create_unified_layers_list)

	# Insert commits list
	echo "- Adding commits list in ${main_html}"
	insert_commits_html "${WEB_DIR_PATH}/${main_html}" "${commit1_i}" "${commit2_i}"

	# Insert pages list
	echo "- Adding schematic pages list in ${main_html}"
	insert_pages_html "${WEB_DIR_PATH}/${main_html}" "${commit_hash_1}" "${commit_hash_2}"

	# Insert layers list
	echo "- Adding layers list in ${main_html}"
	insert_layers_html "${WEB_DIR_PATH}/${main_html}"

# ======
# TODO: These parsing text needs to work for .sch and .kicad_sch

	# Set project title with kicad project folder name
	project_title=$(basename "${REPO_ABSOLUTE_PATH}")
	echo "- Project's title: ${BTE}${LBL}${project_title}${RCO}"
	sed -i "s|\[PROJECT_TITLE\]|${project_title}|g" "${WEB_DIR_PATH}/${main_html}"

	# Set Kicad project's name
	echo "- Project's name: ${BTE}${LBL}${kicad_proj_name}${RCO}"
	sed -i "s|var board_name =.*|var board_name = \"${kicad_proj_name}\"; // updated by kiri script|g" "${WEB_DIR_PATH}/kiri.js"

	# Set schematic and board titles
	local sch_title=$(grep -i "title " "${kicad_sch}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | cut -d" " -f 2- | sed "s/[)\"]//g")
	local sch_label="${sch_title}"
	local pcb_title=$(grep -i "(title .*)" "${kicad_pcb}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | cut -d" " -f 2- | sed "s/[)\"]//g")
	local pcb_label="${pcb_title}"
	if [[ -z "${sch_title}" ]]; then sch_title="{sch_title}"; sch_label="${BTE}${LRE}[missing]${RCO}"; fi
	if [[ -z "${pcb_title}" ]]; then pcb_title="{pcb_title}"; pcb_label="${BTE}${LRE}[missing]${RCO}"; fi
	echo "- Sch Title: ${BTE}${LMA}${sch_label}${RCO}"
	echo "- PCB Title: ${BTE}${LCY}${pcb_label}${RCO}"
	sed -i "s|\[SCH_TITLE\]|Sch \| ${sch_title}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[PCB_TITLE\]|PCB \| ${pcb_title}|g" "${WEB_DIR_PATH}/${main_html}"

	# Set schematic and board revision
	local sch_revision=$(grep -i "Rev" "${kicad_sch}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2- | sed "s/\"//g")
	local sch_label="${sch_revision}"
	local pcb_revision=$(grep "(rev " "${kicad_pcb}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2- | sed "s/\"//g")
	local pcb_label="${pcb_revision}"
	if [[ -z "${pcb_revision}" ]]; then pcb_revision="{pcb_rev}"; pcb_label="${BTE}${LRE}[missing]${RCO}"; fi
	if [[ -z "${sch_revision}" ]]; then sch_revision="{sch_rev}"; sch_label="${BTE}${LRE}[missing]${RCO}"; fi
	echo "- Sch Revision: ${BTE}${LMA}${sch_label}${RCO}"
	echo "- PCB Revision: ${BTE}${LCY}${pcb_label}${RCO}"
	sed -i "s|\[SCH_REVISION\]|${sch_revision}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[PCB_REVISION\]|${pcb_revision}|g" "${WEB_DIR_PATH}/${main_html}"

	# Set schematic and board date
	local sch_date=$(grep -i "date" "${kicad_sch}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2 | sed "s/\"//g")
	local sch_label="${sch_date}"
	local pcb_date=$(grep "(date " "${kicad_pcb}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2 | sed "s/\"//g")
	local pcb_label="${pcb_date}"
	if [[ -z "${sch_date}" ]]; then sch_date="{sch_date}"; sch_label="${BTE}${LRE}[missing]${RCO}"; fi
	if [[ -z "${pcb_date}" ]]; then pcb_date="{pcb_date}"; pcb_label="${BTE}${LRE}[missing]${RCO}"; fi
	echo "- Sch Date: ${BTE}${LMA}${sch_label}${RCO}"
	echo "- PCB Date: ${BTE}${LCY}${pcb_label}${RCO}"
	sed -i "s|\[PCB_DATE\]|${pcb_date}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[SCH_DATE\]|${sch_date}|g" "${WEB_DIR_PATH}/${main_html}"

	# Initial commit
	echo "- Initial commits: ${BTE}${LMA}${commit_hash_1}${RCO}, ${BTE}${LCY}${commit_hash_2}${RCO}"
	sed -i "s|\[COMMIT_1_HASH\]|${commit_hash_1}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[COMMIT_2_HASH\]|${commit_hash_2}|g" "${WEB_DIR_PATH}/${main_html}"

	# Initial Kicad project path
	local project_path_1="$(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${OUTPUT_DIR_PATH}/${commit_hash_1}/${kicad_proj_name}.${kicad_pro_extension}")"
	local project_path_2="$(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${OUTPUT_DIR_PATH}/${commit_hash_2}/${kicad_proj_name}.${kicad_pro_extension}")"
	echo "- Initial project path:"
	echo "  Pro 1: ${BTE}${LMA}${project_path_1}${RCO}"
	echo "  Pro 2: ${BTE}${LCY}${project_path_2}${RCO}"
	sed -i "s|\[COMMIT_1_KICAD_PRO\]|${project_path_1}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[COMMIT_2_KICAD_PRO\]|${project_path_2}|g" "${WEB_DIR_PATH}/${main_html}"

	# Update initial schematic images
	local sch_img_1="../${commit_hash_1}/kiri/sch/${kicad_proj_name}.svg"
	local sch_img_2="../${commit_hash_2}/kiri/sch/${kicad_proj_name}.svg"
	echo "- Initial schematic images:"
	echo "  Sch 1: ${BTE}${LMA}$(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${OUTPUT_DIR_PATH}/${commit_hash_1}/${sch_img_1}")${RCO}"
	echo "  Sch 2: ${BTE}${LCY}$(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${OUTPUT_DIR_PATH}/${commit_hash_2}/${sch_img_2}")${RCO}"
	sed -i "s|\[INITIAL_COMMIT_1_SCH\]|${sch_img_1}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[INITIAL_COMMIT_2_SCH\]|${sch_img_2}|g" "${WEB_DIR_PATH}/${main_html}"

	# Update initial layout images
	local initial_layer_id="$(printf "%02d" "$(echo -e "${layers}" | head -1 | cut -d "|" -f1 | tr "." "_")")"
	local initial_layer_name="$(echo -e "${layers}" | sed '/^$/d' | head -1 | cut -d "|" -f2 | tr "." "_")"
	local pcb_img_1="../${commit_hash_1}/kiri/pcb/layer-${initial_layer_id}.svg"
	local pcb_img_2="../${commit_hash_2}/kiri/pcb/layer-${initial_layer_id}.svg"
	echo "- Inicial layer: id=${initial_layer_id}, name=${initial_layer_name}"
	echo "- Initial layer images:"
	echo "  PCB 1: ${BTE}${LMA}$(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${OUTPUT_DIR_PATH}/${commit_hash_1}/${pcb_img_1}")${RCO}"
	echo "  PCB 2: ${BTE}${LCY}$(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${OUTPUT_DIR_PATH}/${commit_hash_2}/${pcb_img_2}")${RCO}"
	sed -i "s|\[INITIAL_COMMIT_1_PCB\]|${pcb_img_1}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[INITIAL_COMMIT_2_PCB\]|${pcb_img_2}|g" "${WEB_DIR_PATH}/${main_html}"

	# Change initial view to layout
	# set_default_html_view "${kicad_sch}"

	# Update server's port
	if [[ "${WEBSERVER_PORT}" != "" ]]; then
		echo "- Setting server's port: ${WEBSERVER_PORT}"
		sed -i "s|var port =.*|var port = ${WEBSERVER_PORT}; // updated by kiri script|g" "${WEB_DIR_PATH}/kiri.js"
	fi
}

archive_kiri_website()
{
	# If directory exists and it is not empty
	if [[ -d "${OUTPUT_DIR_PATH}" ]] && [[ ! "$(ls -A "${OUTPUT_DIR_PATH}")" ]]; then
		local datetime=$(date +"%Y.%m.%d-%Hh%M")
		local package="$(basename "${OUTPUT_DIR_PATH}")-${datetime}.tgz"
		echo -e "${LBL}Archiving generated files in${RCO} ${package}"
		tar -cvzf "${package}" "${OUTPUT_DIR_PATH}" &> /dev/null
	fi
}

launch_webserver()
{
	if [[ "${START_SERVER}" != 0 ]]; then
		# if grep -i -q "Microsoft" "/proc/version" &> /dev/null; then
		# 	# Webserver alternative for Windows with WSL
		# 	local host=127.0.0.1
		# 	if [[ "${WEBSERVER_PORT}" == "" ]]; then
		# 		WEBSERVER_PORT=8080
		# 	fi
		# 	if [[ ${LAUNCH_BROWSER} == 1 ]]; then
		# 		cmd.exe /C start "http://${host}:${WEBSERVER_PORT}" &> /dev/null &
		# 	fi
		# 	echo "Starting web-server at http://${host}:${WEBSERVER_PORT}"
		# 	echo "Hit Ctrl+C to end session"
		# 	if python3 -m http.server -d "${WEB_DIR_PATH}/../" -b "${host}" "${WEBSERVER_PORT}" &> /dev/null; then
		# 		pid=$!
		# 		kill -9 $pid > /dev/null
		# 	else
		# 		echo
		# 		echo -e "Error: Web-server's port ${WEBSERVER_PORT} already in use."
		# 		echo -e "Close older kiri sessions or change the port with '-p [PORT]'"
		# 		exit 1
		# 	fi
		# else

			if [[ "${WEBSERVER_PORT}" != "" ]]; then
				local webserver_port_param="-p ${WEBSERVER_PORT}"
			fi
			if [[ ${LAUNCH_BROWSER} == 0 ]]; then
				server_only_flag="-S"
			fi
			if kiri-server "${OUTPUT_DIR_PATH}" ${webserver_port_param} ${server_only_flag} 2> /dev/null; then
				pid=$!
				kill -9 $pid > /dev/null
			else
				echo -e "Something went wrong with kiri-server, try to force the port with '-p'"
				exit 1
			fi
		# fi
	fi
}

# ====================================================================================================
# ====================================================================================================
# ====================================================================================================

get_kicad_pro()
{
	local kicad_proj_path="${1}"

	local kicad_pro="$(find "${kicad_proj_path}" -maxdepth 1 -name "*.kicad_pro")"
	if [[ -z "${kicad_pro}" ]]; then
		kicad_pro="$(find "${kicad_proj_path}" -maxdepth 1 -name "*.pro")"
	fi

	basename "${kicad_pro}"
}

get_kicad_sch()
{
	local kicad_proj_path="${1}"
	local kicad_proj_name="${2}"
	local kicad_pro_extension="${3}"
	local kicad_sch
	case "${kicad_pro_extension}" in
		"pro")
			basename "$(find "${kicad_proj_path}" -maxdepth 1 -name "${kicad_proj_name}\.sch")"
			;;
		"kicad_pro")
			basename "$(find "${kicad_proj_path}" -maxdepth 1 -name "${kicad_proj_name}\.kicad_sch")"
			;;
	esac
}

get_kicad_sch_pages()
{
	# Parse a list of schematic pages from the main Kicad's schematic
	# Format: schematic_page_name|filename_without_extension

	local kicad_sch="${1}"
	local git_hash="${2}"

	local sch_extension="$(get_file_extension "${kicad_sch}")"

	if [[ -z "${git_hash}" ]] || [[ "${git_hash}" == "_local_" ]]; then
		git_hash="HEAD"
	fi

	case "${sch_extension}" in
		"sch")
			git ls-tree -r --name-only "${git_hash}" | grep "\.sch$" | sed "s|${kicad_sch}||g"
			;;
		"kicad_sch")
			git ls-tree -r --name-only "${git_hash}" | grep "\.kicad_sch$" | sed "s|${kicad_sch}||g"
			;;
	esac
}

get_kicad_cache_lib()
{
	local kicad_proj_path="${1}"
	local kicad_proj_name="${2}"
	basename "$(find "${kicad_proj_path}" -maxdepth 1 -name "${kicad_proj_name}-cache.lib")" 2> /dev/null
}

get_kicad_pcb()
{
	local kicad_proj_path="${1}"
	local kicad_proj_name="${2}"
	basename "$(find "${kicad_proj_path}" -maxdepth 1 -name "${kicad_proj_name}.kicad_pcb")" 2> /dev/null
}

show_project_files()
{
	local kicad_project_path="${1}"
	local kicad_pro="${2}"
	local kicad_sch="${3}"
	local kicad_pcb="${4}"
	local kicad_cache_lib="${5}"

	local kicad_sch_pages="$(get_kicad_sch_pages "${kicad_project_path}/${kicad_sch}")"

	if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_PLOTGITSCH}" == "1" ]] || [[ "${DEBUG_KIDIFF}" == "1" ]]; then
		echo "     project_path: ${kicad_project_path}"
		echo "          project: ${kicad_pro}"
		echo "        schematic: ${kicad_sch}"
		if [[ -n "${kicad_sch_pages}" ]]; then
			padding=$(printf ' %.0s' {1..19})
			echo -e "  extra_sch_files: $(echo -e "${kicad_sch_pages}" | sed "s/^/${padding}/g" | sed '1s/[ ]\+//')"
		fi
		if [[ -n "${kicad_cache_lib}" ]]; then
			echo -e "        cache.lib: ${kicad_cache_lib}"
		fi
		echo "           layout: ${kicad_pcb}"
		echo
	fi
}

show_main_global_variables()
{
	if [[ "${VERBOSE}" == 1 ]] || [[ "${DEBUG}" == 1 ]] || [[ "${DEBUG_KIDIFF}" == 1 ]] || [[ "${DEBUG_PLOTGITSCH}" == 1 ]]; then
		(
			echo
			echo "          KIRI_HOME_PATH = ${KIRI_HOME_PATH}"
			echo "           KICAD_VERSION = $(get_kicad_version)"
			echo "            CURRENT_PATH = ${KIRI_LAUNCH_PATH}"
			echo " KICAD_PRO_ABSOLUTE_PATH = ${KICAD_PRO_ABSOLUTE_PATH}"
			echo "      REPO_ABSOLUTE_PATH = ${REPO_ABSOLUTE_PATH}"
			echo "  KICAD_PROJ_NESTED_PATH = ${KICAD_PROJ_NESTED_PATH}"
			echo "KICAD_PROJ_ABSOLUTE_PATH = ${KICAD_PROJ_ABSOLUTE_PATH}"
			echo "         OUTPUT_DIR_PATH = ${OUTPUT_DIR_PATH}"
			echo "            WEB_DIR_PATH = ${WEB_DIR_PATH}"
			echo
		) | cut -c -$(($(tput cols)-3)) | sed "s/\(.\{$(($(tput cols)-3))\}\)/\1.../"
	fi
}

main()
{
	export KIRI_PID="${$}"

	trap "exit 1" TERM
	trap cleanup_on_exit INT

	readonly KIRI_HOME_PATH="$(dirname "$(dirname "${0}")")"

	check_required_tools

	shift
	command_line_parse "${@}"

	show_main_global_variables

	local kicad_pro="$(get_kicad_pro "${KICAD_PROJ_ABSOLUTE_PATH}")"
	local kicad_pro_extension="$(get_file_extension "${kicad_pro}")"
	local kicad_proj_name="$(get_file_without_extention "${kicad_pro}")"
	local kicad_sch="$(get_kicad_sch "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}" "${kicad_pro_extension}")"
	local kicad_pcb="$(get_kicad_pcb "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")"
	local kicad_sch_pages="$(get_kicad_sch_pages "${KICAD_PROJ_ABSOLUTE_PATH}/${kicad_sch}")"
	local kicad_cache_lib="$(get_kicad_cache_lib "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")"
	show_project_files "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_pro}" "${kicad_sch}" "${kicad_pcb}" "${kicad_cache_lib}"

	if [[ "${REMOVE_KIRI_FOLDER}" == 1 ]]; then
		echo -e "\n${LBL}Output folder:${RCO} $(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${OUTPUT_DIR_PATH}")"
		echo -e "${LYE}Removing leftovers from the previous run${RCO}"
		rm -rf "${OUTPUT_DIR_PATH}"
	fi

	get_git_commits_list "${kicad_pro}" "${kicad_sch}" "${kicad_pcb}" "${kicad_sch_pages}"
	generate_diffs
	build_main_html

	if [[ ${ARCHIVE_PROJECT} == 1 ]]; then
		archive_kiri_website
	fi
	
	python -mwebbrowser file://${OUTPUT_DIR_PATH}/web/index.html
#	launch_webserver
}

main "${0}" "${@}"
